name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Disable pip cache for more reliable builds
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install the package in editable mode with all dependencies
        pip install -e .
    
    - name: Verify installation
      run: |
        python -c "import backend; print('Backend package imported successfully')"
        python -m pytest --version
    
    - name: Run backend tests with pytest
      run: |
        python -m pytest backend/tests/ -v --tb=short --strict-markers
    
    - name: Run import tests
      run: |
        # Test that all modules can be imported
        python -c "from backend.auth import DatabricksAuthentication"
        python -c "from backend.config import get_config"
        python -c "from backend.logging import get_logger"
        python -c "from backend.routers.volume import VolumeHandler"

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy
        # Install project dependencies for type checking
        pip install -e .
    
    - name: Run ruff linting
      run: |
        python -m ruff check backend/ --output-format=github
      continue-on-error: true
    
    - name: Run black formatting check
      run: |
        python -m black --check --diff backend/
      continue-on-error: true
    
    - name: Run isort import sorting check
      run: |
        python -m isort --check-only --diff backend/
      continue-on-error: true
    
    - name: Run mypy type checking
      run: |
        python -m mypy backend/ --ignore-missing-imports
      continue-on-error: true

  # Placeholder for frontend tests - add when frontend code is implemented
  # frontend-tests:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'  # or 'yarn' depending on package manager
  #   
  #   - name: Install frontend dependencies
  #     run: npm ci  # or yarn install --frozen-lockfile
  #   
  #   - name: Run frontend tests
  #     run: npm test  # or yarn test
  #   
  #   - name: Run frontend linting
  #     run: npm run lint  # or yarn lint